const express = require('express');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(express.json());

// Database (mock)
let formData = [];

// Route to create a form
app.post('/form', (req, res) => {
    const { uniqueId, title, name, email, phoneNumber, isGraduate } = req.body;
    // Validate data types
    if (typeof uniqueId !== 'uuidv4' || typeof title !== 'string' || typeof name !== 'string' || typeof email !== 'string' || typeof phoneNumber !== 'number' || typeof isGraduate !== 'boolean') {
        return res.status(400).json({ error: 'Invalid data types' });
    }
    formData.push({ uniqueId, title, name, email, phoneNumber, isGraduate });
    res.json({ message: 'Form created successfully', uniqueId });
});

// Route to fill data to the form
app.post('/filldata', (req, res) => {
    const { uniqueId, name, email, phoneNumber, isGraduate } = req.body;
    // Validate data types
    if (typeof uniqueId !== 'uuidv4') {
        return res.status(400).json({ error: 'Invalid data type for uniqueId' });
    }
    if (typeof name !== 'string') {
        return res.status(400).json({ error: 'Invalid data type for name' });
    }
    if (typeof email !== 'string') {
        return res.status(400).json({ error: 'Invalid data type for email' });
    }
    if (typeof phoneNumber !== 'number') {
        return res.status(400).json({ error: 'Invalid data type for phoneNumber' });
    }
    if (typeof isGraduate !== 'boolean') {
        return res.status(400).json({ error: 'Invalid data type for isGraduate' });
    }
    // Additional validation for rest of the fields can be added here
    formData.push({ title, uniqueId, name, email, phoneNumber, isGraduate, ...rest });
    res.json({ message: 'Data filled successfully' });
});

// Route to get all filled data for a form
app.get('/getdata/:title', (req, res) => {
    const { title } = req.params;
    const form = formData.find(form => form.title === title);
    if (!form) {
        return res.status(404).json({ error: 'Form not found' });
    }
    const data = formData.filter(entry => entry.title === title);
    res.json(data);
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
